# Autogenerated from /home/xm/Graduation/llvm-project/mlir/test/lit.site.cfg.py.in
# Do not edit!

# Allow generated file to be relocatable.
import os
import platform
def path(p):
    if not p: return ''
    # Follows lit.util.abs_path_preserve_drive, which cannot be imported here.
    if platform.system() == 'Windows':
        return os.path.abspath(os.path.join(os.path.dirname(__file__), p))
    else:
        return os.path.realpath(os.path.join(os.path.dirname(__file__), p))


import sys

config.target_triple = "x86_64-unknown-linux-gnu"
config.llvm_src_root = "/home/xm/Graduation/llvm-project/llvm"
config.llvm_tools_dir = lit_config.substitute("/home/xm/Graduation/llvm-project/mlir/build/./bin")
config.llvm_shlib_ext = ".so"
config.llvm_shlib_dir = lit_config.substitute(path(r"/home/xm/Graduation/llvm-project/mlir/build/./lib"))
config.python_executable = "/usr/bin/python3.10"
config.enable_assertions = 1
config.native_target = "X86"
config.host_os = "Linux"
config.host_cc = "/usr/bin/clang "
config.host_cxx = "/usr/bin/clang++ "
config.enable_libcxx = "OFF"
config.host_cmake = "/usr/bin/cmake"
config.host_cmake_generator = "Ninja"
config.llvm_use_linker = "lld"
config.llvm_use_sanitizer = ""
config.host_arch = "x86_64"
config.mlir_src_root = "/home/xm/Graduation/llvm-project/mlir"
config.mlir_obj_root = "/home/xm/Graduation/llvm-project/mlir/build/tools/mlir"
config.mlir_tools_dir = "/home/xm/Graduation/llvm-project/mlir/build/./bin"
config.mlir_cmake_dir = "/home/xm/Graduation/llvm-project/mlir/build/lib/cmake/mlir"
config.mlir_lib_dir = "/home/xm/Graduation/llvm-project/mlir/build/./lib"

config.build_examples = 1
config.run_nvptx_tests = 1
config.enable_cuda_runner = 0
config.run_rocm_tests = 0
config.enable_rocm_runner = 0
config.gpu_compilation_format = ""
config.rocm_test_chipset = ""
config.enable_sycl_runner = 0
config.enable_spirv_cpu_runner = 0
config.enable_vulkan_runner = 0
config.enable_bindings_python = 0
config.intel_sde_executable = ""
config.mlir_run_amx_tests = 0
config.mlir_run_arm_sve_tests = 0
# This is a workaround for the fact that LIT's:
#   %if <cond>
# requires <cond> to be in the set of available features. 
# TODO: Update LIT's TestRunner so that this is not required.
if config.mlir_run_arm_sve_tests:
    config.available_features.add("mlir_arm_sve_tests")
config.mlir_run_arm_sme_tests = 0
config.mlir_run_x86vector_tests = 0
config.mlir_run_riscv_vector_tests = ""
config.mlir_run_cuda_tensor_core_tests = 0
config.mlir_run_cuda_sm80_tests = 0
config.mlir_run_cuda_sm80_lt_tests = 0
config.mlir_run_cuda_sm90_tests = 0
config.mlir_include_integration_tests = 0
config.arm_emulator_executable = ""
# Some tests marked with 'UNSUPPORTED: target=aarch64{{.*}}' are still run when
# configured with ARM_EMULATOR_EXECUTABLE and the default target is not aarch64.
# Add feature 'mlir_arm_emulator' here and to UNSUPPORTED list of such tests.
if config.arm_emulator_executable:
    config.available_features.add("mlir_arm_emulator")
config.arm_emulator_options = ""
config.arm_emulator_mlir_runner_executable = ""
config.arm_emulator_lli_executable = ""
config.arm_emulator_utils_lib_dir = ""
config.arm_sme_abi_routines_shlib = ""
config.riscv_vector_emulator_executable = ""
config.riscv_vector_emulator_options = ""
config.riscv_emulator_lli_executable = ""
config.riscv_emulator_utils_lib_dir = ""

import lit.llvm
lit.llvm.initialize(lit_config, config)

# Let the main config do the real work.
lit_config.load_config(config, "/home/xm/Graduation/llvm-project/mlir/test/lit.cfg.py")
